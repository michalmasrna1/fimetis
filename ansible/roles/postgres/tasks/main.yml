---
# Tasks for installing and setting up postgres

  - name: Installing postgresql
    apt:
      pkg:
      - postgresql
      - postgresql-contrib
      - python3-pip
      - libpq-dev
      - pypy-ipaddress
      update_cache: yes

  - name: upgrade setuptools
    shell: pip3 install --upgrade setuptools

  - name: psycopg2
    shell: pip3 install psycopg2

  - name: werkzeug
    shell: pip3 install werkzeug

  - name: Create linux user for accessing postgres role in db
    shell: sudo adduser --disabled-password --gecos "" {{ pg_user }}

  - name: Copy init database sql file from role
    copy:
      src: "{{ role_path }}/files/init.sql"
      dest: /tmp/

  - name: Setting user group params into sql
    lineinfile:
      dest: /tmp/init.sql
      regexp: ".*oidc_user_group_name.*"
      line: "INSERT INTO \"group\" (name, urn, role, is_external) VALUES('{{ oidc_user_group_name }}', '{{ oidc_user_group_urn }}', 'user', TRUE);"

  - name: Setting admin group params into sql
    lineinfile:
      dest: /tmp/init.sql
      regexp: ".*oidc_admin_group_name.*"
      line: "INSERT INTO \"group\" (name, urn, role, is_external) VALUES('{{ oidc_admin_group_name }}', '{{ oidc_admin_group_urn }}', 'admin', TRUE);"

  - name: Copy filter database sql file from role
    copy:
      src: "{{ role_path }}/files/filter.sql"
      dest: /tmp/

  - name: Copy cluster database sql file from role
    copy:
      src: "{{ role_path }}/files/cluster.sql"
      dest: /tmp/

  - name: Copying import_super_admin.py in /tmp/
    copy:
      src: "{{ role_path }}/files/import_super_admin.py"
      dest: /opt/backend/

  - name: Chmod +x superamin.py
    shell: chmod +x /opt/backend/import_super_admin.py

#  - name: Cleaning used init database file
#    shell: rm /tmp/init.sql
 
#  - name: Move generate hash to tmp
#    copy:
#      src: "{{ role_path }}/files/generate_hash.py"
#      dest: /tmp/

#  - name: rights
#    shell: chmod +x /tmp/generate_hash.py

#  - name: generate password
#    shell: /tmp/generate_hash.py --passwd {{ super_admin_passwd }}
#    register: hash
  
#  - name: print hash
#    shell: echo {{ hash.stdout }} > /tmp/test.txt
